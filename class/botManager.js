const botAnketa = require('./botAnketa')
const botZaim = require('./botZaim')

class BotManager {

    constructor(){
     this.name="noname"
     this.anketa=new botAnketa()
     this.zaim=new botZaim(this.anketa)
     this.base=[   
        {
          message:"–∑–∞–π–º",
          logic: this.zaim
        },
        {
            message:"/start",
            result:{
                msg:"–¢–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è",
                opts:{
                    reply_markup: {
                        resize_keyboard: true,
                        one_time_keyboard: false,
                        keyboard: [
                            [
                              {
                                text: 'üîé–ü–æ–¥–æ–±—Ä–∞—Ç—å –∑–∞–π–º',
                              }, {
                                text: '‚≠ê–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è'
                              }
                            ],
                            [
                              {
                                text: 'üìù–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É'
                              }
                            ],
                            [
                              {
                                text: '‚Åâ–ü–æ–º–æ—â—å'
                              }
                            ]        
                          ],
                    }
                }
            }
        },
        {
            message:"–ü–æ–º–æ—â—å",
            result:{
                msg:"–ß–µ–º –º—ã –º–æ–∂–µ–º –ø–æ–º–æ—á—å?",
                opts:{
                    reply_markup: {
                        inline_keyboard: [
                            [
                              {
                                text: '–ö–∞–∫ –ø–æ–¥–æ–±—Ä–∞—Ç—å –≤—ã–≥–æ–¥–Ω—ã–π –∑–∞–π–º?', // —Ç–µ–∫—Å—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ
                                callback_data: 'k31' // –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π
                              }
                            ],
                            [
                                {
                                  text: '–ö–∞–∫ –≤—ã–±—Ä–∞—Ç—å –∑–∞–π–º –≤ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö?',
                                  callback_data: 'k32'
                                }
                            ],
                            [
                              {
                                text: '–ö–∞–∫ —Å–º–µ–Ω–∏—Ç—å —Å—Ç—Ä–∞–Ω—É –∏–ª–∏ –≤–æ–∑—Ä–∞—Å—Ç?',
                                callback_data: 'k33'
                              }
                          ]
                           ]}
                }
            }
        },
        {
          message:"–∞–Ω–∫–µ—Ç—É",
          result:{
              msg:"üìù–ó–∞–ø—É—Å–∫ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è... \n –†–µ–¥–∞–∫—Ç–æ—Ä –ø—Ä–æ—Ñ–∏–ª—è - –º–æ–¥—É–ª—å, –ø–æ–∑–≤–æ–ª—è—é—â–∏–π –º–µ–Ω—è—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –±–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –≤—ã–¥–∞—á–∏.\n \n –ü–æ–∑–≤–æ–ª—è–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å:\n ‚ùó–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç \n ‚ùó–†–µ–≥–∏–æ–Ω –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è \n ‚ùó–ö—Ä–µ–¥–∏—Ç–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é",
              opts:{
                  reply_markup: {
                      inline_keyboard: [
                          [
                            {
                              text: '‚úÖ–ó–∞–ø—É—Å—Ç–∏—Ç—å', // —Ç–µ–∫—Å—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ
                              callback_data: 'k41' // –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π
                            }
                          ],
                          [
                              {
                                text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ',
                                callback_data: 'k42'
                              }
                          ],
                         ]}
              }
          }
      },
      {
        message:"k41",
        logic: this.anketa
    },
    {
        message:"k42",
        result:{
            msg:"–¢–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –µ—â—ë —Ä–∞–∑",
            opts:{}
        }
    },
        {
            message:"k31",
            result:{
                msg:"–û—Ç–≤–µ—Ç –Ω–∞ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å",
                opts:{}
            }
        },
        {
            message:"k32",
            result:{
                msg:"–û—Ç–≤–µ—Ç –Ω–∞ –≤—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å",
                opts:{}
            }
        },
        {
            message:"k33",
            result:{
                msg:"–û—Ç–≤–µ—Ç –Ω–∞ —Ç—Ä–µ—Ç–∏–π –≤–æ–ø—Ä–æ—Å",
                opts:{}
            }
        },
        {
          message:"–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è",
          result:{
              msg:"‚≠ê–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è",
              opts:{
                  reply_markup: {
                      inline_keyboard: [
                        [
                          {
                            text: '–ü–æ–¥ 0%', // —Ç–µ–∫—Å—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ
                            callback_data: 'k21' // –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π
                          }
                        ],
                        [
                            {
                              text: '–° –ø–ª–æ—Ö–æ–π –∫—Ä–µ–¥–∏—Ç–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–µ–π',
                              callback_data: 'k22'
                            }
                        ],
                        [
                          {
                            text: '–ù–∞ QIWI',
                            callback_data: 'k23'
                          }
                      ],
                        [
                          {
                            text: '–ù–∞ Yandex.–î–µ–Ω—å–≥–∏',
                            callback_data: 'k24'
                          }
                      ],
                      [
                        {
                          text: '–ù–∞–ª–∏—á–Ω—ã–º–∏ —á–µ—Ä–µ–∑ –ö–æ–Ω—Ç–∞–∫—Ç',
                          callback_data: 'k25'
                        }
                      ],
                      [
                        {
                          text: '–í—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã',
                          callback_data: 'k26'
                        }
                      ],
                         ]}
              }
          }
      },
      {
          message:"k21",
          result:{
              msg:"–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ‚Ññ1",
              opts:{}
          }
      },
      {
          message:"k22",
          result:{
              msg:"–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ‚Ññ2",
              opts:{}
          }
      },
      {
          message:"k23",
          result:{
              msg:"–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ‚Ññ3",
              opts:{}
          }
      },
      {
        message:"k24",
        result:{
            msg:"–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ‚Ññ4",
            opts:{}
        }
    },
    {
      message:"k25",
      result:{
          msg:"–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ‚Ññ5",
          opts:{}
      }
  },
  {
    message:"k26",
    result:{
        msg:"–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ‚Ññ6",
        opts:{}
    }
},
     ]
    }  
    think(message)
    {
        let result=false
        if (this.anketa.begin)
        {
           return this.anketa.think(message)
        }
        this.base.forEach((item)=>{
            if (message.includes(item.message))
            {
                if (item.logic)
                {
                  result=item.logic.think(message)
                }else
                {
                    result=item.result
                }
                
            }
        })
        if (!result)
        {
          return {
            msg:"–ù–µ –ø–æ–Ω–∏–º–∞—Ç—å",
            opts:{}
          }
        }
       return result
    }
}
module.exports = BotManager;